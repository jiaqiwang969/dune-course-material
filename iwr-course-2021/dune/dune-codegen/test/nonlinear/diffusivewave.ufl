cell = quadrilateral
degree = 1
dim = 2

x = SpatialCoordinate(cell)

V = FiniteElement("DG", cell, degree)

u = TrialFunction(V)
v = TestFunction(V)

n = FacetNormal(cell)('+')

# penalty factor
alpha = 1.0
# h_ext = CellVolume(cell) / FacetArea(cell)
# gamma_ext = (alpha * degree * (degree + dim - 1)) / h_ext
h_int = Min(CellVolume(cell)('+'), CellVolume(cell)('-')) / FacetArea(cell)
gamma_int = (alpha * degree * (degree + dim - 1)) / h_int

# SIPG: -1.0, IIPG: 0.0, NIPG: 1.0
theta = 1.0

norm = sqrt(sqrt(grad(u)[0]**2 + grad(u)[1]**2))
K = u**(5./3.)
# / Max(1e-8, norm)

poisson = inner(K*grad(u), grad(v))*dx \
  - inner(n, avg(K*grad(u)))*jump(v)*dS \
  + gamma_int*jump(u)*jump(v)*dS \
  + theta*jump(u)*inner(avg(K*grad(v)), n)*dS
#  - inner(n, K*grad(u))*v*ds \
#  + gamma_ext*u*v*ds \
#  + theta*u*inner(K*grad(v), n)*ds \
#  - gamma_ext*g*v*ds \
#  - theta*g*inner(K*grad(v), n)*ds

mass = (u*v)*dx

forms = [mass, poisson]
interpolate_expression = sin(pi*x[0])
