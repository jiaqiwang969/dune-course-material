%\documentclass[ignorenonframetext,11pt]{beamer}
\usepackage[english]{babel}
\usepackage[utf8]{inputenc}

\usepackage{zh_ch}

% \usepackage{lmodern}
\usepackage{amsmath,amssymb,amsfonts}



% only presentation 
\mode<presentation>
{
  \usetheme{default}
  \setbeamercovered{transparent}
  \usefonttheme{structurebold}
  \setbeamertemplate{theorems}[numbered]
  \usepackage{amscd}
}

\usepackage{multicol}
\usepackage{enumerate}
\usepackage{color}
\usepackage{stmaryrd}
\usepackage{lmodern}



\title{DUNE PDELab Tutorial C++ Refresher}
\author{Olaf Ippisch}
\institute[]
{
  Institut für Mathematik, TU Clausthal\\
  Erzstr. 1, D-38678 Clausthal-Zellerfeld \\[6pt]
}
\date[\today]{\today}

% logo nach oben
\mode<presentation>
{
% No navigation symbols and no lower logo
\setbeamertemplate{sidebar right}{}

% logo
\newsavebox{\logobox}
\sbox{\logobox}{%
    \hskip\paperwidth%
    \rlap{%
      % putting the logo should not change the vertical possition
      \vbox to 0pt{%
        \vskip-\paperheight%
        \vskip0.35cm%
        \llap{\insertlogo\hskip0.1cm}%
        % avoid overfull \vbox messages
        \vss%
      }%
    }%
}

\addtobeamertemplate{footline}{}{%
    \usebox{\logobox}%
}
}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
% now comes the individual stuff lecture by lecture
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\begin{document}

\begin{onlyenv}<article>
\maketitle
\end{onlyenv}

\frame{\titlepage}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\begin{frame}
  \frametitle{Goals of this introduction}
  使用DUNE需要一些高级的C++特性，或者说使其使用更加容易。
  它的使用更容易。其中一些是在最近的
  C++语言标准C++11、C++14和C++17。我们将具体看一下。
  \begin{itemize}
  \item 在基于Linux的系统上编译程序
  \item 面向对象的编程
  \item 命名空间
  \item 自动类型推理
  \item 模板
  \item C++标准库的容器
  \item 基于范围的for循环
  \item Lambda函数
  \end{itemize}
\end{frame}

\section{Compiling Programs on Linux}
\begin{frame}[fragile]
  \frametitle<presentation>{Compiling Programs}
  在基于Linux的系统上，（GNU-）C++编译器被称为\inline!g++!. In order to compile a program from the source file \inline!main.cc! and create an executable called \inline!myprogram!，你可以像这样运行它。
  \begin{lstlisting}
  g++ -o myprogram main.cc
  \end{lstlisting}
用\lstinline!g++! the C++14 standard is the default since version 6.1. If you want to use C++17 or if you use the Intel compiler or \lstinline!clang!, you can set the standard with the option \lstinline!-std=c++14! or \lstinline!-std=c++17!（在Windows系统上，选项可能不同），例如。
  \begin{lstlisting}
  g++ -std=c++17 -o myprogram main.cc
  \end{lstlisting}

如果你的程序被成功编译（没有错误信息），你就用以下方式运行它。
  \begin{lstlisting}
  ./myprogram
  \end{lstlisting}
并得到例如以下的输出
  \begin{lstlisting}
  Hello, world!
  \end{lstlisting}
\end{frame}

\begin{frame}[fragile]
  \frametitle<presentation>{Compiling Programs}
  对于更复杂的软件项目，通常会提供所谓的makefile。makefile确保在执行命令\inline!make!时，项目的所有相关源文件都被编译。
  \begin{lstlisting}
  make
  \end{lstlisting}
  如果你只改变了一些源文件后构建项目，只有这些文件被重新编译，这可以大大加快进程。
  
  对于DUNE来说，makefiles是由一个叫做\inline!cmake!的工具生成的。
\end{frame}

\section{Object-Oriented Programming}

\begin{frame}
\frametitle<presentation>{Object-Oriented Programming}
面向对象编程的基本思想是定义具有一定功能的组件。这些组件结合了提供和控制该功能所需的方法以及相关的数据。不同的组件通过接口连接。同样的接口被用于提供相同的一般功能的专门组件。

这种方法有几个优点。
\begin{itemize}
\item 不同的组件可以单独开发。
\item 如果一个组件的改进版本可用，它们可以在不对程序代码进行重大修改的情况下被使用。
\item 可以很容易地使用同一个组件的几个实现。
\end{itemize}

这也被用于现实世界，例如，汽车的轮胎、CPU的插座、电脑的USB接口、打印机、手机\dots 。
\end{frame}

\begin{frame}
\frametitle{Object-oriented Programming in C++}
在C++中，这个想法是通过类和对象实现的。类描述了一个组件的功能和结构。这个蓝图的实现被称为对象。

让我们用一个二维矢量作为例子。
\begin{itemize}
\item 矢量由两个组件组成。
\item 必要的操作是长度（规范），两个向量之和，向量与标量的乘法，\dots 。
\item 初始化。创建一个具有定义状态的向量。
\end{itemize}\ \\
$(1,3)$ 和 $(5,0)$ 是不同的向量，但它们有相同的结构。
\pause
\begin{block}{$\Rightarrow$ C++语言概念}。
\inline!class! 描述了类似对象的语义（向量、函数空间、线性求解器，\dots）。
\end{block}
\end{frame}

\begin{frame}[fragile]
  \frametitle{Classes}
  \begin{lstlisting}
class Point2D {
public:
  Point2D(double x_, double y_)
    : x(x_), y(y_)
  {}

  double norm() const {
    return sqrt(x*x + y*y);
  }

  void add(const Point2D &p) {
    x += p.x;
    y += p.y;
  }

private:
  double x, y;
};
  \end{lstlisting}
\end{frame}

\begin{frame}[fragile]
  \frametitle{Using C++ Objects}
 类定义了一个新的数据类型。
\begin{itemize}
  \item \inline!class! type are called objects and can be used like other types (\inline!int!, \inline!double!, \dots的变量）。)
    \begin{lstlisting}
      // calls constructor, initialises data
      Point2D p = Point2D(3.0,4.1); 
    \end{lstlisting}
  \item 一个\emph{object}的成员变量和函数是通过变量名称后的点和变量/函数的名称来访问。
    \begin{lstlisting}
      std::cout << p.norm() << std::endl;
    \end{lstlisting}
  \item \inline!class! 的对象可以像普通变量一样使用。
    \begin{lstlisting}
      Point2D p2 = p; // create a copy of p
      p.add(p2);
    \end{lstlisting}
  \end{itemize}
\end{frame}

\begin{frame}[fragile]
  \frametitle{Encapsulation}
  \begin{itemize}
  \item 一个\inline!class! can be either \inline!public! (accessible from outside the \inline!class!) or \inline!private! (accessible only from methods of the same \inline!class!的数据成员和方法）。)
  \item 如果你试图从类外访问一个\inline!private!成员，你会得到一个编译器错误。
    \begin{lstlisting}
      std::cout << p.x << std::endl; // compiler error!
    \end{lstlisting}
  \item 建议将\inline!class!的数据成员变成私有。这被称为\emph{encapsulation}，便于以后改变数据的存储方式，这通常可以大大改善性能。
  \end{itemize}
\end{frame}

\section{Namespaces}

\begin{frame}[fragile]
  \frametitle<presentation>{Namespaces}
  \begin{itemize}
  \item 让我们假设你想用头文件\inline!linear_solver.h! and \inline!nonlinear_solver.h!来使用两个现有的库。
  \item 都定义了一个函数\inline!solve_problem()!。
  \item 编译器无法区分它们!
  \item 如何才能在不发生名称冲突的情况下使用这两个库？
  \end{itemize}
  
\end{frame}

\begin{frame}[fragile]
  \frametitle<presentation>{Namespaces}
  C++使用命名空间，可以轻松解决这个问题。
\begin{lstlisting}
  namespace linsolv {
    #include<linear_solver.h>
  }
  namespace nonlinsolv {
    #include<nonlinear_solver.h>
  }
  int main() {
    linsolv::solve_problem();
    nonlinsolv::solve_problem();
  }
\end{lstlisting}
每个\inline!class! automatically defines a namespace with the name of the \inline!class!包含其数据成员和函数。
\end{frame}

\begin{frame}[fragile]
  \frametitle{Builtin名称空间\texttt{std}}。
  \begin{itemize}
  \item C++还包含一个有用的函数和类库，即所谓的标准库。
  \item 初学者经常写 
  \begin{lstlisting}
  using namespace std;
  \end{lstlisting}
在他们程序的顶部，将标准库的所有函数导入全局命名空间。
  \item 你应该\emph{NEVER}这样做，因为这可能导致名称冲突，并降低进一步开发的灵活性
  \end{itemize}
  
\end{frame}

\begin{frame}[fragile]
  \frametitle<presentation>{Builtin Namespace \texttt{std}}。
只要在函数和类型前面写上命名空间\inline!std::!即可。
  \begin{lstlisting}
    #include <iostream>
    #include <cmath>

    int main()
    {
      double v = 2.0;
      double s = sqrt(v);
      std::cout << "The square root of " << v
                << " is " << s << std::endl;
    }
  \end{lstlisting}
  如果你使用现代编辑器的自动补全功能，这并没有太多的打字开销，而且比以后重写代码的工作量要小得多。
\end{frame}

\section{Automatic Type Deduction}

\begin{frame}
\frametitle<presentation>{Automatic Type Deduction}

从C++11开始，如果能从变量的初始化中推断出变量所需的类型，就可以自动检测。这可以用关键字\inline!auto!来表示。

\lstinputlisting{auto.cc}

\end{frame}

\begin{frame}[fragile]
\frametitle{\texttt{auto}: 优势}。

\begin{itemize}
\item 使用\inline!auto! instead of manually writing the exact type (e.g.~\inline!int!）有很多优点（以牺牲一点细节控制为代价）。
\begin{itemize}
\item 如果你用\inline!auto!创建一个变量，它将总是被初始化为一个已定义的值，这就避免了一大类非常微妙的错误。
\item 如果你写了\inline!auto!，编译器可以选择正确的类型，减少错误的风险。
\item 当使用像DUNE这样的高级库时，变量的类型会变得非常复杂，使人很难读到写明这些类型的代码。
\end{itemize}
\item 只有从C++14开始，才有可能在函数定义和声明中使用\inline!auto!。
\end{itemize}

\end{frame}

\begin{frame}
\frametitle{\texttt{auto}和字面意思}。

对于用\inline!auto!进行类型推导，适用于C++字面的通常规则。

\lstinputlisting{auto3.cc}

\end{frame}

\begin{frame}[fragile]
  \frametitle{References}
  \begin{itemize}
  \item 在C++中，如果变量被传递给一个函数，默认情况下会生成一个变量的副本。
  \item 引用是一种选择，它只为相同的数据生成一个新的名字。
  \item 引用是通过添加一个\inline!&! between the data type and the variable name, e.g. \inline!int &blub=blob! or \inline!int f(int &a)!来生成的。
  \item 你只能生成对现有变量的引用，而不是对字面意义的引用!
  \end{itemize}
  
\end{frame}

\begin{frame}[fragile]
  \frametitle<presentation>{\texttt{auto} 和引用}。
  \begin{itemize}
  \item 如果你想让一个变量成为自动类型推理的引用，请写\inline!auto &! instead of \inline!auto!。
  \end{itemize}

  \begin{lstlisting}
    /* Copying */
    auto i = 4;
    auto j = i;  // i = 4, j = 4, j is a copy
    i += 1;      // i = 5, j = 4
    j -= 1;      // i = 5, j = 3
    j  = i;      // i = 5, j = 5

    /* Referencing */
    auto &k = i; // i = 5, k = 5, k is a reference to i
    i  = 2;      // i = 2, j = 5, k = 2
    i += 1;      // i = 3, j = 5, k = 3
    k  = 8;      // i = 8, j = 5, k = 8
  \end{lstlisting}
\end{frame}


\section{Templates}

%-----------------------------------------------------------------------------

\begin{frame}[fragile]
\frametitle<presentation>{Generic Programming}


\begin{itemize}%[<+->]
\item 通常不同的数据类型需要相同的算法。
\item 如果没有通用编程，就必须为所有的数据类型编写相同的函数，这很乏味，而且容易出错，例如
\end{itemize}
\vspace*{-10mm}
\begin{multicols}{2}
    \begin{lstlisting}
      int Square(int x)
      {
        return(x*x);
      }

      float Square(float x)
      {
        return(x*x);
      }
    \end{lstlisting}

    \begin{lstlisting}
      long Square(long x)
      {
        return(x*x);
      }

      double Square(double x)
      {
        return(x*x);
      }      
    \end{lstlisting}
\end{multicols}
\vskip-7mm
\begin{itemize}
\item 通用编程允许一次性编写算法，并以数据类型为参数来确定算法。
数据类型。
\end{itemize}

\end{frame}

%-----------------------------------------------------------------------------

\begin{frame}[fragile]
\frametitle{Template functions}
\begin{itemize}%[<+->]
\item 一个函数模板以关键字\inline|template|和一个或多个模板参数的列表开始。
在角括号中，由逗号分隔。
\begin{lstlisting}
template<typename T>
T Square(T a)
{
    return(a*a);
}
\end{lstlisting}
\item 如果使用了模板，编译器可以根据函数参数从函数模板中自动生成函数（与重载一样，返回类型不相关）。
 \item 也可以明确指定模板参数。
 \begin{lstlisting}
     std::cout << Square<int>(4) << std::endl;
 \end{lstlisting}
 \item 参数类型必须符合声明的内容
\end{itemize}
\end{frame}

%-----------------------------------------------------------------------------

\begin{frame}[fragile]
\frametitle{Example: Unary Template Function}
\begin{lstlisting}
#include<cmath>
#include<iostream>

template<typename T>
T Square(T a)
{
    return(a*a);
}

int main()
{
    std::cout << Square<int>(4) << std::endl;
    std::cout << Square<double>(M_PI) << std::endl;
    std::cout << Square(3.14) << std::endl;
}
\end{lstlisting}
\end{frame}

%-----------------------------------------------------------------------------

\begin{frame}[fragile]
\frametitle{Example: Binary Template Function}
\begin{lstlisting}
#include<cmath>
#include<iostream>

template<class U>
const U &max(const U &a, const U &b) {
 if (a>b)
     return(a);
 else
     return(b);
}

int main()
{
 std::cout << max(1,4) << std::endl;
 std::cout << max(3.14,7.) << std::endl;
 std::cout << max(6.1,4) << std::endl; // compiler error
 std::cout << max<double>(6.1,4) << std::endl; // correct
 std::cout << max<int>(6.1,4) << std::endl;    // warning
}
\end{lstlisting}
\end{frame}

%-----------------------------------------------------------------------------

\begin{frame}[fragile]
\frametitle{Useful predefined template functions}
C++标准库已经提供了一些有用的模板函数。
\begin{itemize}%[<+->]
\item \inline!const T& std::min(const T& a, const T& b)! \\
  a和b的最小值\\。
  \begin{lstlisting}
    auto c = std::min(a,b);
  \end{lstlisting}
\item \inline!const T& std::max(const T& a, const T& b)! \\
  A和B的最大值\\
  \begin{lstlisting}
    auto c = std::max(a,b);
  \end{lstlisting}
\item \inline!void std::swap(T& a, T& b)! \\
  交换a和b\\ 。
  \begin{lstlisting}
    std::swap(a,b);
  \end{lstlisting}
\end{itemize}
\end{frame}


%-----------------------------------------------------------------------------

\begin{frame}[fragile]
\frametitle{Class Templates, Non-type Template arguments, \\ default arguments}
\begin{lstlisting}
template<typename T, int dimension = 3>
class NumericalSolver
{
    ...
  protected:
    T variable;
};
\end{lstlisting}
\begin{itemize}%[<+->]
\item 模板参数可以在类的声明中使用。
\item 不仅是类型，还有整数值都可以作为模板参数使用。在模板实例化中使用的值必须是编译时的常量。
\item 如果在类定义中使用模板，最后的模板参数可以有默认值。
\item 类的名称是指类的名称加上模板参数。
\end{itemize}

\end{frame}

%-----------------------------------------------------------------------------

\begin{frame}[fragile]
\frametitle{Inheritance from Class Templates}
\begin{lstlisting}
template<typename T>
class MyNumericalSolver : public NumericalSolver<T,3>
{
    T myVariable;
  public:
    MyNumericalSolver(T val) : NumericalSolver<T,3>(),
                               myVariable(val)
    {
      std::cout << NumericalSolver<T,3>::variable
                << std::endl;
    };
};
\end{lstlisting}
\begin{itemize}%[<+->]
\item 如果一个类是从一个模板类派生出来的，那么模板参数必须作为基类名称的一部分给出。
作为基类名称的一部分。
\item 基类构造函数的调用以及基类成员和方法的前缀也是如此。
基类成员和方法的前缀。
\end{itemize}

\end{frame}


%-----------------------------------------------------------------------------

\begin{frame}[fragile]
\frametitle{Using Members of a Template Base Class}
\begin{lstlisting}
template<typename T>
class MyNumericalSolver : public NumericalSolver<T,3>
{
    T myVariable;
  public:
    MyNumericalSolver(T val) : NumericalSolver<T,3>(),
                               myVariable(val)
    {
        this->variable=val;
    };
};
\end{lstlisting}
\begin{itemize}
\item 模板基类的成员往往不能自动正确解决
\item 为了避免问题，（作为一条经验法则）总是在基类成员（方法和变量）前面加上
基类成员（方法和变量）前加上\inline!this->! 。
\end{itemize}

\end{frame}


%-----------------------------------------------------------------------------

\begin{frame}[fragile]
\frametitle{Template Compilation}
\begin{itemize}
\item 如果不使用模板，因此不进行实例化，模板代码只被编译器检查是否有粗略的语法错误（如~缺少分号）。
编译器检查粗略的语法错误（例如~遗漏的分号）。
\item 测试，如果所有的函数调用都是有效的，是在模板实例化时进行的。
像缺失函数这样的错误只有在那时才会被发现。错误信息可能相当奇怪。
\item 由于代码只在模板实例化时创建，编译器必须在这个时候知道整个函数定义，不仅是它的定义。
整个函数的定义，而不仅仅是它的声明。
\item 因此，对模板来说，通常的头文件和源文件的细分是不可能的。
\end{itemize}
\end{frame}

%-----------------------------------------------------------------------------

\begin{frame}[fragile]
\frametitle<presentation>{Template Compilation}
\begin{itemize}
\item 为了节省计算时间和内存，只生成真正被调用的类函数。
\item 因此
类模板也可以被实例化为不支持所有必要操作的类型，只要在需要它们的地方有方法。
只要需要它们的方法不被调用。
\item 如果模板类有很长的参数列表，类型定义是有帮助的。
\begin{lstlisting}
typedef Point2D P;
auto coord = P(8,1); // Now P means the same as Point2D
\end{lstlisting}

\end{itemize}
\end{frame}

\begin{frame}[fragile]
\frametitle{Template Aliases}
\begin{lstlisting}
template <typname U>    // create partially defined templates 
using VectorSpace = Dune::PDELab::Backend::Vector<GFS,U>::type;

int main()
{
  using int32 = int;                  // rename ordinary types
  using Vector = 
        typename Dune::PDELab::Backend::Vector<GFS,double>::type;
  auto v = Vector(gfs); // Save lots of typing...
  using Function = void (*)(double);  // function types
  VectorSpace<float> blub;
}
\end{lstlisting}


\begin{itemize}
\item 为长类型名称定义缩写的另一种方法被称为 "模板别名"。
\item 同时，部分模板别名也可以固定一些模板参数。
\end{itemize}

\end{frame}


%-----------------------------------------------------------------------------

\begin{frame}[fragile]
\frametitle{关键词\texttt{typename}}。
\begin{lstlisting}
template<typename T, int dimension = 3>
class NumericalSolver : public T::ClassType
{
    ...
    typename T::SubType doSomething(
                          typename T::OtherSubType argument);
  private:
    typename T::SubType variable;
}
\end{lstlisting}
\begin{itemize}%[<+->]
\item 在C++中，默认情况下，类模板的成员不被认为是一种类型，而是
一个（静态）变量。
\item 需要使用\inline!typename!关键字来表示类的成员(静态)。
表示一个类的成员（作为模板参数给出或依赖于模板参数）是一个类型。
参数）是一个类型。
\item 它只在模板内需要/允许使用。
\item 它不用于基类规范列表或成员初始化器列表中
在构造函数定义中。
\end{itemize}

\end{frame}


%-----------------------------------------------------------------------------

\begin{frame}[fragile]
\frametitle{关键词\texttt{.template}}。
\begin{lstlisting}
class A
{
  public:
    template<class T> T doSomething() { };
};

template<class U> void doSomethingElse(U variable)
{
    char result = variable.template doSomething<char>();
}

template<class U,typename V> V doSomethingMore(U *variable)
{
    return variable->template doSomething<V>();
}
\end{lstlisting}
\begin{itemize}%[<+->]
\item C++默认假设对象后面的每个\inline!<!字符都是比较的开始。
\item 在这样一个方法名称前面的关键字\inline!template!表示
一个明确的模板参数。
\end{itemize}

\end{frame}


%-----------------------------------------------------------------------------

\section{The C++ Standard Library}

%-----------------------------------------------------------------------------

\begin{frame}
\frametitle<presentation>{The C++ Standard Library}
标准库（有时称为STL，代表标准模板库）是
\begin{itemize}%[<+->]
\item 一个有用的模板函数和类的集合。
\item 可用于所有现代C++编译器。
\item 为提高效率而优化的。
\item 比使用普通的C语言库和数据结构要安全得多。
\end{itemize}
\end{frame}

%-----------------------------------------------------------------------------

\begin{frame}
\frametitle{STL-Containers}

\begin{itemize}
\item 数据表示法对于算法的效率往往至关重要
\item STL定义了容器和使用它们的算法。
\item 容器被用来管理元素的集合。
\item 迭代器提供了一个通用的接口来遍历容器中的元素。
\item 有各种各样的容器为不同的目的进行优化。
\begin{center}
\includegraphics[width=9cm]{containers.jpg}

图自：\cite{josuttis99:stl}
\end{center}
\end{itemize}

\end{frame}

%-----------------------------------------------------------------------------


\begin{frame}
  \frametitle{Library Example: dynamic array}
  STL包含一个叫做\inline!std::vector!的动态数组，它比其普通的
  C的对应物要好得多。
  \begin{itemize}
  \item 当你不再需要它时，它会自动释放内存，避免了内存泄漏。
  \item 它知道自己的大小，所以你不必记住它。
  \item 如果你需要一个更大的向量，它可以自动调整自己的大小。
  \item 它是一个模板。你指定要存储在它里面的对象的类型。
  \item 它很快速。
  \end{itemize}
\end{frame}


% \begin{frame}
% \frametitle{Vec}
% Sequence Containers are ordered collections, where each element has a certain position.
% \begin{description}%[<+->]
% \item[Vector] is a dynamic array of elements.
% \begin{itemize}
% \item elements can be accessed directly with an index (random access).
% \item appending and removing at the end is fast.
% \end{itemize}
% % \item[Deque], the ``double-ended'' queue, is a dynamic array.
% % \begin{itemize}
% % \item can grow in both directions.
% % \item elements can be accessed directly with an index, however, if elements are inserted at the front, the index of a certain element might change.
% % \item appending and removing elements at the end and the beginning is fast.
% % \end{itemize}
% \end{description}
% \end{frame}

%-----------------------------------------------------------------------------

\begin{frame}[fragile]
\frametitle{Vector Example}
下面的例子说明如何使用\inline!std::vector!。
\begin{lstlisting}
#include <iostream>
#include <vector>

int main()
{
    auto b = std::vector<double>(7); // a vector for 7 doubles
    std::cout << b.size() << std::endl; // output the size
    for (int i = 0; i < b.size() ; ++i)
        b[i] = i*0.1; // assign some data
    auto c = b; // create a copy, automatically copying all data
    c.resize(15); // Make c bigger
    std::cout << b.size() << std::endl; // still 7
    b.push_back(3.8); // make b larger and append the value 3.8
}
\end{lstlisting}
\end{frame}

\begin{frame}
\frametitle{Iterators}
\begin{itemize}
\item 容器概念的一个重要部分是对存储在容器中的所有元素进行迭代的通用方案，它与使用所谓迭代器的容器类型无关。
\item 迭代器的使用语法来自于普通C语言中指针的使用。
\item 每个容器都有一个方法\inline!begin()!，它返回一个指向该容器第一个成员的迭代器。
\item 迭代器的数据类型是\inline!containerclass::iterator!（但如果你使用auto，你就不需要知道这个）。
\item 如果你调用迭代器的增量运算符\inline!++!，它将在之后指向下一个元素。
\item 你可以通过比较迭代器和\inline!container.end()!来检查你是否到达了容器的末端。
\end{itemize}
\end{frame}

\begin{frame}
\frametitle<presentation>{Iterators}
\begin{itemize}
\item 要访问迭代器所指向的元素，你必须解除对它的引用，例如 \inline!*it! 。
\item 如果容器的元素是一个类的对象，你也可以使用操作符\inline!it->!来访问该类的数据成员或函数。
\end{itemize}
\lstinputlisting{iterator.cc}
\end{frame}

\section{Range-based for Loops}

\begin{frame}[fragile]
  \frametitle<presentation>{基于范围的\texttt{for} 循环}。
  使用基于范围的\inline!for!循环，同样的操作（在整个容器上迭代）可以写得更简单。
  \begin{lstlisting}
    auto vec = std::vector<double>(8);
    for (auto d : vec)
      std::cout << d << std::endl; // prints all entries of vec
  \end{lstlisting}
  \begin{itemize}
  \item 对C数组和所有STL容器都有效。
  \item 对于使用DUNE也很重要!
  \item 小心：你在基于范围的\inline!for!-循环中得到的不是一个迭代器。你不需要解除引用它。你可以直接使用它来访问内容。
  \end{itemize}
\end{frame}

\begin{frame}[fragile]
  \frametitle<presentation>{基于范围的 \texttt{for} 循环}。

  你可以得到当前访问的元素的副本或引用（如果你写了\inline!auto &!）。

  \begin{lstlisting}
    #include<iostream>
    #include<vector>

    int main()
    {
      std::vector<double> x(5);
      int i=0;
      for (auto &y : x) {       // with reference
        y = i * 1.2;            // can be changed
        ++i;
      }
      for (auto y : x) {        // with copy
        y *= y;                 // original container unchanged
        std::cout << y << std::endl;
      }
    }
  \end{lstlisting}

\end{frame}

\section{Type Deduction for Function Argumetns}

\begin{frame}[fragile]
\frametitle{Decltype}
\begin{itemize}
\item \lstinline!decltype! 决定一个表达式的结果类型（不是结果值）。它可以用来制作匹配的变量。
\begin{lstlisting}
int a,b;
decltype(a+b) c;
\end{lstlisting}
\item 与模板别名一起，它可以 
用来存储类型。
\inline!using type = decltype(expression)! 
\item 与\inline!auto!的区别。不创建相同类型的变量，而是存储类型，也保留了引用。
\item 如果你想把函数调用的结果存储在一个容器中，这很好。
\end{itemize}
\begin{lstlisting}
template<typename Vector>
auto squareroot_values(const Vector& v)
{
  using R = decltype(sqrt(v[0])); // result type of std::sqrt()
  auto result = std::vector<R>();
  for (auto d : v)           // create a vector of square roots
    result.push_back(std::sqrt(d)); 
  return result;
}
\end{lstlisting}

\end{frame}

\begin{frame}[fragile]
\frametitle{Historic: \lstinline!decltype! and return values in C++11}
\begin{itemize}
\item 在C++11中，\inline!auto!不能直接用于函数的定义或声明。只有从C++14开始才可以这样做。
\item 函数的返回类型可以根据函数参数的类型来确定\inline!decltype! 。
\item \inline!decltype! 确定一个给定操作的类型。
\item 在最简单的版本中，\inline!auto! is used as return type and \inline!-> decltype(op)! is added after the argument list of the function, where \inline!op!是一个给定操作。
\end{itemize}
\begin{lstlisting}
template<typename T, typename U>
auto add(T t, U u) -> decltype(t + u);
\end{lstlisting}

\end{frame}


\section{Lambda Functions}

\begin{frame}[fragile]
  \frametitle<presentation>{Lambda functions}
  \begin{itemize}
  \item C++11引入了一种简化的可能性来创建（主要是临时的）函数，即所谓的lambda表达式或lambdas。
  \item 示例。
\begin{lstlisting}
auto f = [](auto x) -> double 
{
  double y = x;
  return std::sin(y);
};
\end{lstlisting}
\item 对于单个表达式，还有一个更短的版本（返回类型是自动计算的）。
\begin{lstlisting}
auto f = [](auto x) { return std::sin(x); };
\end{lstlisting}
\item Lambdas可以像变量一样被存储，lambda函数的类型是由实现定义的。因此\inline!auto! 必须使用变量。
  \end{itemize}
\end{frame}

\begin{frame}[fragile]
  \frametitle{Lambda functions: Syntax}
\inline![capture-list](parameter-list) -> return-type { code; }!
\vspace*{1em}
  \begin{itemize}
  \item Lambdas没有一个函数名。
  \item 它们以一个捕获列表开始，确定周围范围的哪些变量在lambda中可用。
  \item 接下来是一个普通的参数列表和一个返回（类似于\lstinline!decltype!的规定），最后是函数的代码块。
  \item 两种类型的捕获：通过值（创建一个副本）或通过引用（指向原始变量）。
  \item 使用方法。列出变量名称，为引用添加安培号（\inline!&!）。
  \item 快捷方式。\inline![=]! capture all variables by value, \inline![&]! 通过引用捕获所有变量
  \item 从C++17开始，也可以将一个变量作为常量引用来捕获。\inline![&v=std::as_const(v)]!
  \item \structure{Caution:} 当使用通过引用捕获时，请确保在调用lambda函数时原始变量仍然存在!
  \end{itemize}
\end{frame}

\begin{frame}[fragile]
\frametitle{Lambda functions: Capture Example}
\begin{lstlisting}
auto pi = 3.14;
auto f = [pi](auto x) { return pi * x; };
auto g = [&pi](auto x) { return pi * x; };
f(1); // returns 3.14;
g(1); // returns 3.14;
pi = 3.141;
f(1); // returns 3.14 - value was copied!
g(1); // returns 3.141 - value was referenced!

int call_count = 0;
auto h = [&](auto x) 
{
  ++call_count;
  return pi + x;
}
h(1); // returns 4.141
std::cout << call_count << std::endl; // prints 1
\end{lstlisting}

\end{frame}

\begin{frame}[fragile] \frametitle{积累使用
    \inline!for_each!：兰姆达函数}。

兰姆达函数对模板算法非常有用，例如，由标准模板库定义的算法。\inline!for_each!算法将一个函数对象应用于容器中的每个元素。

\vspace*{2em}

  \begin{lstlisting}
auto coll = std::vector<double>();
// fill coll with data...
int count = 0;
double sum = 0;
std::for_each(coll.begin(),coll.end(),
              [&](auto x){ ++count; sum += x; } );
std::cout << sum / count << std::endl;
  \end{lstlisting}
\end{frame}



\section{References}

\begin{frame} \frametitle<presentation>{Further Reading}

\begin{thebibliography}{Vandervoorde and Josuttis(2003)}

\bibitem[Stroustrup (2014)]{stroustrup13:cpp_programming}
Bjarne Stroustrup.
\newblock \emph{Programming: Principles and Practice Using C++}.
\newblock Addison Wesley, 2014.

\bibitem[Stroustrup(2013)]{stroustrup13:cpp_language}
Bjarne Stroustrup.
\newblock \emph{The C++ Programming Language}.
\newblock Addison Wesley, 2013.

\bibitem[cppreference.comm]{cppreference}
The cppreference community.
\newblock \emph{The community C++ reference web site.}
\newblock \alert<2>{\url{http://cppreference.com}}.

\end{thebibliography}
\end{frame}

\end{document}

