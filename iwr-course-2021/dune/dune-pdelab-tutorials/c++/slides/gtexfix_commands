(lp0
S'\\begin{onlyenv}'
p1
aS'<article>'
p2
aS'\\maketitle'
p3
aS'\\end{onlyenv}'
p4
aS'\\frame{\\titlepage}'
p5
aS'___GTEXFIXCOMMENT0___'
p6
aS'___GTEXFIXCOMMENT1___'
p7
aS'\\begin{frame}'
p8
aS'\\frametitle{Goals of this introduction}'
p9
aS'\\begin{itemize}'
p10
aS'\\item'
p11
aS'\\item'
p12
aS'\\item'
p13
aS'\\item'
p14
aS'\\item'
p15
aS'\\item'
p16
aS'\\item'
p17
aS'\\item'
p18
aS'\\end{itemize}'
p19
aS'\\end{frame}'
p20
aS'\\section{Compiling Programs on Linux}'
p21
aS'\\begin{frame}[fragile]'
p22
aS'\\frametitle<presentation>{Compiling Programs}'
p23
aS'\\inline!g++!. In order to compile a program from the source file \\inline!main.cc! and create an executable called \\inline!myprogram!'
p24
aS'\\lstinline!g++! the C++14 standard is the default since version 6.1. If you want to use C++17 or if you use the Intel compiler or \\lstinline!clang!, you can set the standard with the option \\lstinline!-std=c++14! or \\lstinline!-std=c++17!'
p25
aS'\\end{frame}'
p26
aS'\\begin{frame}[fragile]'
p27
aS'\\frametitle<presentation>{Compiling Programs}'
p28
aS'\\inline!make!'
p29
aS'\\inline!cmake!'
p30
aS'\\end{frame}'
p31
aS'\\section{Object-Oriented Programming}'
p32
aS'\\begin{frame}'
p33
aS'\\frametitle<presentation>{Object-Oriented Programming}'
p34
aS'\\begin{itemize}'
p35
aS'\\item'
p36
aS'\\item'
p37
aS'\\item'
p38
aS'\\end{itemize}'
p39
aS'\\dots'
p40
aS'\\end{frame}'
p41
aS'\\begin{frame}'
p42
aS'\\frametitle{Object-oriented Programming in C++}'
p43
aS'\\begin{itemize}'
p44
aS'\\item'
p45
aS'\\item'
p46
aS'\\dots'
p47
aS'\\item'
p48
aS'\\end{itemize}'
p49
aS'\\'
p50
aS'\\\\'
p51
aS'$(1,3)$'
p52
aS'$(5,0)$'
p53
aS'\\\\'
p54
aS'\\pause'
p55
aS'\\begin{block}'
p56
aS'$\\Rightarrow$'
p57
aS'\\inline!class!'
p58
aS'\\dots'
p59
aS'\\end{block}'
p60
aS'\\end{frame}'
p61
aS'\\begin{frame}[fragile]'
p62
aS'\\frametitle{Classes}'
p63
aS'\\end{frame}'
p64
aS'\\begin{frame}[fragile]'
p65
aS'\\frametitle{Using C++ Objects}'
p66
aS'\\begin{itemize}'
p67
aS'\\item'
p68
aS'\\inline!class! type are called objects and can be used like other types (\\inline!int!, \\inline!double!'
p69
aS'\\dots'
p70
aS'\\item'
p71
aS'\\emph{object}'
p72
aS'\\item'
p73
aS'\\inline!class!'
p74
aS'\\end{itemize}'
p75
aS'\\end{frame}'
p76
aS'\\begin{frame}[fragile]'
p77
aS'\\frametitle{Encapsulation}'
p78
aS'\\begin{itemize}'
p79
aS'\\item'
p80
aS'\\inline!class! can be either \\inline!public! (accessible from outside the \\inline!class!) or \\inline!private! (accessible only from methods of the same \\inline!class!'
p81
aS'\\item'
p82
aS'\\inline!private!'
p83
aS'\\item'
p84
aS'\\inline!class!'
p85
aS'\\emph{encapsulation}'
p86
aS'\\end{itemize}'
p87
aS'\\end{frame}'
p88
aS'\\section{Namespaces}'
p89
aS'\\begin{frame}[fragile]'
p90
aS'\\frametitle<presentation>{Namespaces}'
p91
aS'\\begin{itemize}'
p92
aS'\\item'
p93
aS'\\inline!linear_solver.h! and \\inline!nonlinear_solver.h!'
p94
aS'\\item'
p95
aS'\\inline!solve_problem()!'
p96
aS'\\item'
p97
aS'\\item'
p98
aS'\\end{itemize}'
p99
aS'\\end{frame}'
p100
aS'\\begin{frame}[fragile]'
p101
aS'\\frametitle<presentation>{Namespaces}'
p102
aS'\\inline!class! automatically defines a namespace with the name of the \\inline!class!'
p103
aS'\\end{frame}'
p104
aS'\\begin{frame}[fragile]'
p105
aS'\\frametitle'
p106
aS'\\texttt{std}'
p107
aS'\\begin{itemize}'
p108
aS'\\item'
p109
aS'\\item'
p110
aS'\\item'
p111
aS'\\emph{NEVER}'
p112
aS'\\end{itemize}'
p113
aS'\\end{frame}'
p114
aS'\\begin{frame}[fragile]'
p115
aS'\\frametitle'
p116
aS'<presentation>'
p117
aS'\\texttt{std}'
p118
aS'\\inline!std::!'
p119
aS'\\end{frame}'
p120
aS'\\section{Automatic Type Deduction}'
p121
aS'\\begin{frame}'
p122
aS'\\frametitle<presentation>{Automatic Type Deduction}'
p123
aS'\\inline!auto!'
p124
aS'\\lstinputlisting{auto.cc}'
p125
aS'\\end{frame}'
p126
aS'\\begin{frame}[fragile]'
p127
aS'\\frametitle'
p128
aS'\\texttt{auto}'
p129
aS'\\begin{itemize}'
p130
aS'\\item'
p131
aS'\\inline!auto! instead of manually writing the exact type (e.g.~\\inline!int!'
p132
aS'\\begin{itemize}'
p133
aS'\\item'
p134
aS'\\inline!auto!'
p135
aS'\\item'
p136
aS'\\inline!auto!'
p137
aS'\\item'
p138
aS'\\end{itemize}'
p139
aS'\\item'
p140
aS'\\inline!auto!'
p141
aS'\\end{itemize}'
p142
aS'\\end{frame}'
p143
aS'\\begin{frame}'
p144
aS'\\frametitle'
p145
aS'\\texttt{auto}'
p146
aS'\\inline!auto!'
p147
aS'\\lstinputlisting{auto3.cc}'
p148
aS'\\end{frame}'
p149
aS'\\begin{frame}[fragile]'
p150
aS'\\frametitle{References}'
p151
aS'\\begin{itemize}'
p152
aS'\\item'
p153
aS'\\item'
p154
aS'\\item'
p155
aS'\\inline!&! between the data type and the variable name, e.g. \\inline!int &blub=blob! or \\inline!int f(int &a)!'
p156
aS'\\item'
p157
aS'\\end{itemize}'
p158
aS'\\end{frame}'
p159
aS'\\begin{frame}[fragile]'
p160
aS'\\frametitle'
p161
aS'<presentation>'
p162
aS'\\texttt{auto}'
p163
aS'\\begin{itemize}'
p164
aS'\\item'
p165
aS'\\inline!auto &! instead of \\inline!auto!'
p166
aS'\\end{itemize}'
p167
aS'\\end{frame}'
p168
aS'\\section{Templates}'
p169
aS'___GTEXFIXCOMMENT2___'
p170
aS'\\begin{frame}[fragile]'
p171
aS'\\frametitle<presentation>{Generic Programming}'
p172
aS'\\begin{itemize}'
p173
aS'___GTEXFIXCOMMENT3___'
p174
aS'\\item'
p175
aS'\\item'
p176
aS'\\end{itemize}'
p177
aS'\\vspace*{-10mm}'
p178
aS'\\begin{multicols}'
p179
aS'\\end{multicols}'
p180
aS'\\vskip'
p181
aS'\\begin{itemize}'
p182
aS'\\item'
p183
aS'\\end{itemize}'
p184
aS'\\end{frame}'
p185
aS'___GTEXFIXCOMMENT4___'
p186
aS'\\begin{frame}[fragile]'
p187
aS'\\frametitle{Template functions}'
p188
aS'\\begin{itemize}'
p189
aS'___GTEXFIXCOMMENT5___'
p190
aS'\\item'
p191
aS'\\inline'
p192
aS'\\item'
p193
aS'\\item'
p194
aS'\\item'
p195
aS'\\end{itemize}'
p196
aS'\\end{frame}'
p197
aS'___GTEXFIXCOMMENT6___'
p198
aS'\\begin{frame}[fragile]'
p199
aS'\\frametitle{Example: Unary Template Function}'
p200
aS'\\end{frame}'
p201
aS'___GTEXFIXCOMMENT7___'
p202
aS'\\begin{frame}[fragile]'
p203
aS'\\frametitle{Example: Binary Template Function}'
p204
aS'\\end{frame}'
p205
aS'___GTEXFIXCOMMENT8___'
p206
aS'\\begin{frame}[fragile]'
p207
aS'\\frametitle{Useful predefined template functions}'
p208
aS'\\begin{itemize}'
p209
aS'___GTEXFIXCOMMENT9___'
p210
aS'\\item'
p211
aS'\\inline!const T& std::min(const T& a, const T& b)!'
p212
aS'\\\\'
p213
aS'\\\\'
p214
aS'\\item'
p215
aS'\\inline!const T& std::max(const T& a, const T& b)!'
p216
aS'\\\\'
p217
aS'\\\\'
p218
aS'\\item'
p219
aS'\\inline!void std::swap(T& a, T& b)!'
p220
aS'\\\\'
p221
aS'\\\\'
p222
aS'\\end{itemize}'
p223
aS'\\end{frame}'
p224
aS'___GTEXFIXCOMMENT10___'
p225
aS'\\begin{frame}[fragile]'
p226
aS'\\frametitle{Class Templates, Non-type Template arguments, \\\\ default arguments}'
p227
aS'\\begin{itemize}'
p228
aS'___GTEXFIXCOMMENT11___'
p229
aS'\\item'
p230
aS'\\item'
p231
aS'\\item'
p232
aS'\\item'
p233
aS'\\end{itemize}'
p234
aS'\\end{frame}'
p235
aS'___GTEXFIXCOMMENT12___'
p236
aS'\\begin{frame}[fragile]'
p237
aS'\\frametitle{Inheritance from Class Templates}'
p238
aS'\\begin{itemize}'
p239
aS'___GTEXFIXCOMMENT13___'
p240
aS'\\item'
p241
aS'\\item'
p242
aS'\\end{itemize}'
p243
aS'\\end{frame}'
p244
aS'___GTEXFIXCOMMENT14___'
p245
aS'\\begin{frame}[fragile]'
p246
aS'\\frametitle{Using Members of a Template Base Class}'
p247
aS'\\begin{itemize}'
p248
aS'\\item'
p249
aS'\\item'
p250
aS'\\inline!this->!'
p251
aS'\\end{itemize}'
p252
aS'\\end{frame}'
p253
aS'___GTEXFIXCOMMENT15___'
p254
aS'\\begin{frame}[fragile]'
p255
aS'\\frametitle{Template Compilation}'
p256
aS'\\begin{itemize}'
p257
aS'\\item'
p258
aS'\\item'
p259
aS'\\item'
p260
aS'\\item'
p261
aS'\\end{itemize}'
p262
aS'\\end{frame}'
p263
aS'___GTEXFIXCOMMENT16___'
p264
aS'\\begin{frame}[fragile]'
p265
aS'\\frametitle<presentation>{Template Compilation}'
p266
aS'\\begin{itemize}'
p267
aS'\\item'
p268
aS'\\item'
p269
aS'\\item'
p270
aS'\\end{itemize}'
p271
aS'\\end{frame}'
p272
aS'\\begin{frame}[fragile]'
p273
aS'\\frametitle{Template Aliases}'
p274
aS'\\begin{itemize}'
p275
aS'\\item'
p276
aS'\\item'
p277
aS'\\end{itemize}'
p278
aS'\\end{frame}'
p279
aS'___GTEXFIXCOMMENT17___'
p280
aS'\\begin{frame}[fragile]'
p281
aS'\\frametitle'
p282
aS'\\texttt{typename}'
p283
aS'\\begin{itemize}'
p284
aS'___GTEXFIXCOMMENT18___'
p285
aS'\\item'
p286
aS'\\item'
p287
aS'\\inline!typename!'
p288
aS'\\item'
p289
aS'\\item'
p290
aS'\\end{itemize}'
p291
aS'\\end{frame}'
p292
aS'___GTEXFIXCOMMENT19___'
p293
aS'\\begin{frame}[fragile]'
p294
aS'\\frametitle'
p295
aS'\\texttt{.template}'
p296
aS'\\begin{itemize}'
p297
aS'___GTEXFIXCOMMENT20___'
p298
aS'\\item'
p299
aS'\\inline!<!'
p300
aS'\\item'
p301
aS'\\inline!template!'
p302
aS'\\end{itemize}'
p303
aS'\\end{frame}'
p304
aS'___GTEXFIXCOMMENT21___'
p305
aS'\\section{The C++ Standard Library}'
p306
aS'___GTEXFIXCOMMENT22___'
p307
aS'\\begin{frame}'
p308
aS'\\frametitle<presentation>{The C++ Standard Library}'
p309
aS'\\begin{itemize}'
p310
aS'___GTEXFIXCOMMENT23___'
p311
aS'\\item'
p312
aS'\\item'
p313
aS'\\item'
p314
aS'\\item'
p315
aS'\\end{itemize}'
p316
aS'\\end{frame}'
p317
aS'___GTEXFIXCOMMENT24___'
p318
aS'\\begin{frame}'
p319
aS'\\frametitle{STL-Containers}'
p320
aS'\\begin{itemize}'
p321
aS'\\item'
p322
aS'\\item'
p323
aS'\\item'
p324
aS'\\item'
p325
aS'\\item'
p326
aS'\\begin{center}'
p327
aS'\\includegraphics[width=9cm]{containers.jpg}'
p328
aS'\\cite{josuttis99:stl}'
p329
aS'\\end{center}'
p330
aS'\\end{itemize}'
p331
aS'\\end{frame}'
p332
aS'___GTEXFIXCOMMENT25___'
p333
aS'\\begin{frame}'
p334
aS'\\frametitle{Library Example: dynamic array}'
p335
aS'\\inline!std::vector!'
p336
aS'\\begin{itemize}'
p337
aS'\\item'
p338
aS'\\item'
p339
aS'\\item'
p340
aS'\\item'
p341
aS'\\item'
p342
aS'\\end{itemize}'
p343
aS'\\end{frame}'
p344
aS'___GTEXFIXCOMMENT26___'
p345
aS'___GTEXFIXCOMMENT27___'
p346
aS'___GTEXFIXCOMMENT28___'
p347
aS'___GTEXFIXCOMMENT29___'
p348
aS'___GTEXFIXCOMMENT30___'
p349
aS'___GTEXFIXCOMMENT31___'
p350
aS'___GTEXFIXCOMMENT32___'
p351
aS'___GTEXFIXCOMMENT33___'
p352
aS'___GTEXFIXCOMMENT34___'
p353
aS'___GTEXFIXCOMMENT35___'
p354
aS'___GTEXFIXCOMMENT36___'
p355
aS'___GTEXFIXCOMMENT37___'
p356
aS'___GTEXFIXCOMMENT38___'
p357
aS'___GTEXFIXCOMMENT39___'
p358
aS'___GTEXFIXCOMMENT40___'
p359
aS'___GTEXFIXCOMMENT41___'
p360
aS'___GTEXFIXCOMMENT42___'
p361
aS'___GTEXFIXCOMMENT43___'
p362
aS'\\begin{frame}[fragile]'
p363
aS'\\frametitle{Vector Example}'
p364
aS'\\inline!std::vector!'
p365
aS'\\end{frame}'
p366
aS'\\begin{frame}'
p367
aS'\\frametitle{Iterators}'
p368
aS'\\begin{itemize}'
p369
aS'\\item'
p370
aS'\\item'
p371
aS'\\item'
p372
aS'\\inline!begin()!'
p373
aS'\\item'
p374
aS'\\inline!containerclass::iterator!'
p375
aS'\\item'
p376
aS'\\inline!++!'
p377
aS'\\item'
p378
aS'\\inline!container.end()!'
p379
aS'\\end{itemize}'
p380
aS'\\end{frame}'
p381
aS'\\begin{frame}'
p382
aS'\\frametitle<presentation>{Iterators}'
p383
aS'\\begin{itemize}'
p384
aS'\\item'
p385
aS'\\inline!*it!'
p386
aS'\\item'
p387
aS'\\inline!it->!'
p388
aS'\\end{itemize}'
p389
aS'\\lstinputlisting{iterator.cc}'
p390
aS'\\end{frame}'
p391
aS'\\section{Range-based for Loops}'
p392
aS'\\begin{frame}[fragile]'
p393
aS'\\frametitle'
p394
aS'<presentation>'
p395
aS'\\texttt{for}'
p396
aS'\\inline!for!'
p397
aS'\\begin{itemize}'
p398
aS'\\item'
p399
aS'\\item'
p400
aS'\\item'
p401
aS'\\inline!for!'
p402
aS'\\end{itemize}'
p403
aS'\\end{frame}'
p404
aS'\\begin{frame}[fragile]'
p405
aS'\\frametitle'
p406
aS'<presentation>'
p407
aS'\\texttt{for}'
p408
aS'\\inline!auto &!'
p409
aS'\\end{frame}'
p410
aS'\\section{Type Deduction for Function Argumetns}'
p411
aS'\\begin{frame}[fragile]'
p412
aS'\\frametitle{Decltype}'
p413
aS'\\begin{itemize}'
p414
aS'\\item'
p415
aS'\\lstinline!decltype!'
p416
aS'\\item'
p417
aS'\\inline!using type = decltype(expression)!'
p418
aS'\\item'
p419
aS'\\inline!auto!'
p420
aS'\\item'
p421
aS'\\end{itemize}'
p422
aS'\\end{frame}'
p423
aS'\\begin{frame}[fragile]'
p424
aS'\\frametitle{Historic: \\lstinline!decltype! and return values in C++11}'
p425
aS'\\begin{itemize}'
p426
aS'\\item'
p427
aS'\\inline!auto!'
p428
aS'\\item'
p429
aS'\\inline!decltype!'
p430
aS'\\item'
p431
aS'\\inline!decltype!'
p432
aS'\\item'
p433
aS'\\inline!auto! is used as return type and \\inline!-> decltype(op)! is added after the argument list of the function, where \\inline!op!'
p434
aS'\\end{itemize}'
p435
aS'\\end{frame}'
p436
aS'\\section{Lambda Functions}'
p437
aS'\\begin{frame}[fragile]'
p438
aS'\\frametitle<presentation>{Lambda functions}'
p439
aS'\\begin{itemize}'
p440
aS'\\item'
p441
aS'\\item'
p442
aS'\\item'
p443
aS'\\item'
p444
aS'\\inline!auto!'
p445
aS'\\end{itemize}'
p446
aS'\\end{frame}'
p447
aS'\\begin{frame}[fragile]'
p448
aS'\\frametitle{Lambda functions: Syntax}'
p449
aS'\\inline![capture-list](parameter-list) -> return-type { code; }!'
p450
aS'\\vspace*{1em}'
p451
aS'\\begin{itemize}'
p452
aS'\\item'
p453
aS'\\item'
p454
aS'\\item'
p455
aS'\\lstinline!decltype!'
p456
aS'\\item'
p457
aS'\\item'
p458
aS'\\inline!&!'
p459
aS'\\item'
p460
aS'\\inline![=]! capture all variables by value, \\inline![&]!'
p461
aS'\\item'
p462
aS'\\inline![&v=std::as_const(v)]!'
p463
aS'\\item'
p464
aS'\\structure{Caution:}'
p465
aS'\\end{itemize}'
p466
aS'\\end{frame}'
p467
aS'\\begin{frame}[fragile]'
p468
aS'\\frametitle{Lambda functions: Capture Example}'
p469
aS'\\end{frame}'
p470
aS'\\begin{frame}[fragile]'
p471
aS'\\frametitle'
p472
aS'\\inline!for_each!'
p473
aS'\\inline!for_each!'
p474
aS'\\vspace*{2em}'
p475
aS'\\end{frame}'
p476
aS'\\section{References}'
p477
aS'\\begin{frame}'
p478
aS'\\frametitle<presentation>{Further Reading}'
p479
aS'\\end{frame}'
p480
a.