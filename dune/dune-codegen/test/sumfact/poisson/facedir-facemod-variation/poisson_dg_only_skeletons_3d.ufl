cell = hexahedron
dim = 3

x = SpatialCoordinate(cell)
c = (0.5-x[0])**2 + (0.5-x[1])**2 + (0.5-x[2])**2
g = exp(-1.*c)
f = 2*(3.-2*c)*g

V = FiniteElement("DG", cell, degree)

u = TrialFunction(V)
v = TestFunction(V)

n = FacetNormal(cell)('+')

# penalty factor
alpha = 1.0

# Note: Cell volume calculation by the MultiLinearGeometry is not accurate
# enough (bug). Until this is fixed we just use 1 for h since the test is
# synthetic anyway.
# h_ext = CellVolume(cell) / FacetArea(cell)
h_ext = 1
gamma_ext = (alpha * degree * (degree + dim - 1)) / h_ext

# Note: Cell volume calculation by the MultiLinearGeometry is not accurate
# enough (bug). Until this is fixed we just use 1 for h since the test is
# synthetic anyway.
# h_int = Min(CellVolume(cell)('+'), CellVolume(cell)('-')) / FacetArea(cell)
h_int = 1
gamma_int = (alpha * degree * (degree + dim - 1)) / h_int

# SIPG: -1.0, IIPG: 0.0, NIPG: 1.0
theta = 1.0

# The reference data assumes this quadrature order
dS = dS(metadata={"quadrature_order": 2})

# r = inner(grad(u), grad(v))*dx \
#   - f*v*dx \
#   - inner(n, avg(grad(u)))*jump(v)*dS \
#   + gamma_int*jump(u)*jump(v)*dS \
#   + theta*jump(u)*inner(avg(grad(v)), n)*dS \
#   - inner(n, grad(u))*v*ds \
#   + gamma_ext*u*v*ds \
#   + theta*u*inner(grad(v), n)*ds \
#   - gamma_ext*g*v*ds \
#   - theta*g*inner(grad(v), n)*ds

r = - inner(n, avg(grad(u)))*jump(v)*dS \
  + gamma_int*jump(u)*jump(v)*dS \
  + theta*jump(u)*inner(avg(grad(v)), n)*dS

exact_solution = g
