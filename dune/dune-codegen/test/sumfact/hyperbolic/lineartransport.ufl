cell = quadrilateral

x = SpatialCoordinate(cell)
initial = conditional(And(And(x[0] > 0.1, x[0] < 0.2), And(x[1] > 0.1, x[1] < 0.2)), 1, 0)
dirichlet = conditional(x[0] + x[1] < 1.0, 1, 0)

dsd = ds(subdomain_data=dirichlet, subdomain_id=1)
dso = ds(subdomain_data=dirichlet, subdomain_id=0)

V = FiniteElement("DG", cell, 3)

u = TrialFunction(V)
v = TestFunction(V)

beta = as_vector((1., 1.))
n = FacetNormal(cell)('+')

def numerical_flux(normal, inside, outside):
	return conditional(inner(beta, n) > 0, inside, outside)*inner(beta, n)

mass = u*v*dx

r = -1.*u*inner(beta, grad(v))*dx \
  + numerical_flux(n, u('+'), u('-'))*jump(v)*dS \
  + inner(beta, n)*u*v*dso \
  + numerical_flux(n, u('+'), 0.0)*v*dsd

exact_solution = 0.0
is_dirichlet = dirichlet
interpolate_expression = initial