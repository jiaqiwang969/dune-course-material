cell = quadrilateral
x = SpatialCoordinate(cell)

f = sin(pi*(x[0]-0.45)/0.1)*sin(pi*(x[0]-0.45)/0.1)*sin(pi*(x[1]-0.3)/0.1)*sin(pi*(x[1]-0.3)/0.1)
f = conditional(And(And(x[0] > 0.45, x[0] < 0.55), And(x[1] > 0.3, x[1] < 0.4)), f, 0.0)

V = FiniteElement("DG", cell, 1)
MV = MixedElement(V, V, V)

n = FacetNormal(cell)('+')

u = TrialFunction(MV)
v = TestFunction(MV)

rho, q0, q1 = split(u)

mass = inner(u, v)*dx

flux = as_matrix([[q0,  q1],
                  [rho, 0.],
                  [0., rho]])

# Define numerical fluxes to choose from
llf_flux = dot(avg(flux), n) + 0.5*jump(u)
numerical_flux = llf_flux

r = -1. * inner(flux, grad(v))*dx \
  + inner(numerical_flux, jump(v))*dS \
  + inner(u, v)*ds

interpolate_expression = f, 0.0, 0.0
