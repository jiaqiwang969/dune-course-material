# Taylor-Green vortex

cell = quadrilateral
degree = 2
dim = 2

x = SpatialCoordinate(cell)
time = get_time(cell)

P2 = VectorElement("DG", cell, degree)
P1 = FiniteElement("DG", cell, degree-1)
TH = P2 * P1

v, q = TestFunctions(TH)
u, p = TrialFunctions(TH)

n = FacetNormal(cell)('+')

rho = 1.0
mu = 1.0/100.0

g_v = as_vector((-exp(-2*pi*mu/rho*time)*cos(pi*x[0])*sin(pi*x[1]),
                 exp(-2*pi*mu/rho*time)*sin(pi*x[0])*cos(pi*x[1])))
g_p = -0.25*rho*exp(-4*pi*pi*mu/rho*time)*(cos(2*pi*x[0])+cos(2*pi*x[1]))

# SIPG: -1.0, IIPG: 0.0, NIPG: 1.0
theta = -1.0

# penalty factor
alpha = 1.0
h_int = Min(CellVolume(cell)('+'), CellVolume(cell)('-')) / FacetArea(cell)
gamma_int = (alpha * degree * (degree + dim - 1)) / h_int

mass = rho*inner(u,v)*dx

r = mu * inner(grad(u), grad(v))*dx \
  - p*div(v)*dx \
  - q*div(u)*dx \
  + rho * inner(grad(u)*u,v)*dx \
  - mu * inner(avg(grad(u))*n, jump(v))*dS \
  + mu * gamma_int * inner(jump(u), jump(v))*dS \
  + mu * theta * inner(avg(grad(v))*n, jump(u))*dS \
  + avg(p)*inner(jump(v), n)*dS \
  + avg(q)*inner(jump(u), n)*dS \

interpolate_expression = g_v, g_p
exact_solution = g_v, g_p
