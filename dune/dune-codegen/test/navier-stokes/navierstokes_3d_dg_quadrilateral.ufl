# Beltrami flow

cell = hexahedron
degree = 2
dim = 3

x = SpatialCoordinate(cell)
time = get_time(cell)

P2 = VectorElement("DG", cell, degree)
P1 = FiniteElement("DG", cell, degree-1)
TH = P2 * P1

v, q = TestFunctions(TH)
u, p = TrialFunctions(TH)

n = FacetNormal(cell)('+')

rho = 1.0
mu = 1.0

a = pi/4
d = pi/2
g_v = as_vector((-a*exp(-d*d*time)*(exp(a*x[0])*sin(d*x[2]+a*x[1])+cos(d*x[1]+a*x[0])*exp(a*x[2])),
                 -a*exp(-d*d*time)*(exp(a*x[0])*cos(d*x[2]+a*x[1])+exp(a*x[1])*sin(a*x[2]+d*x[0])),
                 -a*exp(-d*d*time)*(exp(a*x[1])*cos(a*x[2]+d*x[0])+sin(d*x[1]+a*x[0])*exp(a*x[2]))))
g_p = -0.5*a*a*rho*exp(-d*d*time)*  (  2*cos(d*x[1]+a*x[0])*exp(a*(x[2]+x[0]) )*sin(d*x[2]+a*x[1])  +  2*exp(a*(x[1]+x[0]))*sin(a*x[2]+d*x[0])*cos(d*x[2]+a*x[1])  +  2*sin(d*x[1]+a*x[0])*exp(a*(x[2]+x[1]))*cos(a*x[2]+d*x[0])  +  exp(2*a*x[2])  +  exp(2*a*x[1])  +  exp(2*a*x[0])  )


# SIPG: -1.0, IIPG: 0.0, NIPG: 1.0
theta = -1.0

# penalty factor
alpha = 1.0
h_ext = CellVolume(cell) / FacetArea(cell)
gamma_ext = (alpha * degree * (degree + dim - 1)) / h_ext
h_int = Min(CellVolume(cell)('+'), CellVolume(cell)('-')) / FacetArea(cell)
gamma_int = (alpha * degree * (degree + dim - 1)) / h_int

mass = rho*inner(u,v)*dx

r = mu * inner(grad(u), grad(v))*dx \
  - p*div(v)*dx \
  - q*div(u)*dx \
  + rho * inner(grad(u)*u,v)*dx \
  - mu * inner(avg(grad(u))*n, jump(v))*dS \
  + mu * gamma_int * inner(jump(u), jump(v))*dS \
  + mu * theta * inner(avg(grad(v))*n, jump(u))*dS \
  + avg(p)*inner(jump(v), n)*dS \
  + avg(q)*inner(jump(u), n)*dS \
  - mu * inner(grad(u)*n, v)*ds \
  + mu * gamma_ext * inner(u-g_v, v)*ds \
  + mu * theta * inner(grad(v)*n, u-g_v)*ds \
  + p*inner(v, n)*ds \
  + q*inner(u-g_v, n)*ds

interpolate_expression = g_v, g_p
exact_solution = g_v, g_p