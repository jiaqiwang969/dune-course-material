cell = triangle
degree = 1
dim = 2

x = SpatialCoordinate(cell)
c = (0.5-x[0])**2 + (0.5-x[1])**2
g = exp(-1.*c)
f = 4*(1.-c)*g
sgn = conditional(x[1] > 0.5, 1., -1.)
j = -2.*sgn*(x[1]-0.5)*g
bctype = conditional(Or(x[1]<1e-8, x[1]>1.-1e-8), 0, 1)

V = FiniteElement("DG", cell, degree)

u = TrialFunction(V)
v = TestFunction(V)

n = FacetNormal(cell)('+')

ds = ds(subdomain_data=bctype)

# penalty factor
alpha = 1.0
h_ext = CellVolume(cell) / FacetArea(cell)
gamma_ext = (alpha * degree * (degree + dim - 1)) / h_ext
h_int = Min(CellVolume(cell)('+'), CellVolume(cell)('-')) / FacetArea(cell)
gamma_int = (alpha * degree * (degree + dim - 1)) / h_int

# SIPG: -1.0, IIPG: 0.0, NIPG: 1.0
theta = 1.0

r = inner(grad(u), grad(v))*dx \
  - f*v*dx \
  - inner(n, avg(grad(u)))*jump(v)*dS \
  + gamma_int*jump(u)*jump(v)*dS \
  + theta*jump(u)*inner(avg(grad(v)), n)*dS \
  - inner(n, grad(u))*v*ds(1) \
  + gamma_ext*u*v*ds(1) \
  + theta*u*inner(grad(v), n)*ds(1) \
  - gamma_ext*g*v*ds(1) \
  - theta*g*inner(grad(v), n)*ds(1) \
  - j*v*ds(0)

exact_solution = g
