import ufl

cell = triangle

x = SpatialCoordinate(cell)

class SquareFct(ufl.classes.MathFunction):
    def __init__(self, arg):
        ufl.classes.MathFunction.__init__(self, 'square', arg)

    def _ufl_expr_reconstruct_(self, *operands):
        return SquareFct(*operands)

    def derivative(self):
        return 2 * self.ufl_operands[0]

    def visit(self, visitor):
        op = visitor.call(self.ufl_operands[0])
        return op * op


c = SquareFct(0.5-x[0]) + SquareFct(0.5-x[1])
g = exp(-1.*c)
f = 4*(1.-c)*g

V = FiniteElement("CG", cell, 1)
u = TrialFunction(V)
v = TestFunction(V)

r = (inner(grad(u), grad(v)) - f*v)*dx
exact_solution = g
interpolate_expression = g
is_dirichlet = 1