cell = triangle

P2 = VectorElement("CG", cell, 2)
P1 = FiniteElement("CG", cell, 1)
TH = P2 * P1

u, p = TrialFunctions(TH)
v, q = TestFunctions(TH)

rho = 1.0
nu = 0.001

# Boundary condition
x = SpatialCoordinate(cell)
time = get_time(cell)
meanflow = 1.5
start_flow = conditional(time<4, sin(pi*time/8), 1)
g_u0 = conditional(x[0]<1e-8, meanflow*4*x[1]*(0.41-x[1])/(0.41*0.41)*start_flow, 0.)

# Decide where to apply which boundary
# 0: Do nothing
# 1: Dirichlet
bctype = conditional(x[0]<2.2-1e-8, 1., 0.)

# Mass matrix for time discretization
mass = rho*inner(u, v)*dx

# Form for spatial discretization
r = nu*inner(grad(u), grad(v))*dx \
  - p*div(v)*dx \
  - q*div(u)*dx \
  + rho*inner(grad(u)*u, v)*dx

is_dirichlet = bctype, bctype, 0
interpolate_expression = g_u0, 0., 0.
